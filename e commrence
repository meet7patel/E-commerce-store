from flask import Flask, render_template, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, FloatField, SubmitField
from wtforms.validators import DataRequired, URL

app = Flask(__name__)

# Database Configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///store.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'your_secret_key'  # Necessary for CSRF protection

db = SQLAlchemy(app)

# Define the Product Model
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500), nullable=False)
    price = db.Column(db.Float, nullable=False)
    image_url = db.Column(db.String(200), nullable=False)

    def __repr__(self):
        return f'<Product {self.name}>'

# Create the form for adding a new product using Flask-WTF
class ProductForm(FlaskForm):
    name = StringField('Product Name', validators=[DataRequired()])
    description = StringField('Description', validators=[DataRequired()])
    price = FloatField('Price ($)', validators=[DataRequired()])
    image_url = StringField('Image URL', validators=[DataRequired(), URL()])
    submit = SubmitField('Add Product')

# Initialize the Database (Create the tables if they don't exist)
@app.before_first_request
def create_tables():
    db.create_all()

# Home route to display products
@app.route('/')
def home():
    products = Product.query.all()  # Fetch all products from the database
    return render_template('index.html', products=products)

# Route for individual product details
@app.route('/product/<int:product_id>')
def product_detail(product_id):
    product = Product.query.get_or_404(product_id)  # Fetch product by ID
    return render_template('product_detail.html', product=product)

# Route for adding a new product (form submission)
@app.route('/add_product', methods=['GET', 'POST'])
def add_product():
    form = ProductForm()

    if form.validate_on_submit():  # If the form is valid on submit
        # Create a new product based on form data
        new_product = Product(
            name=form.name.data,
            description=form.description.data,
            price=form.price.data,
            image_url=form.image_url.data
        )

        db.session.add(new_product)  # Add the product to the database
        db.session.commit()  # Commit the transaction

        flash('Product added successfully!', 'success')  # Flash success message
        return redirect(url_for('home'))  # Redirect to home page

    return render_template('add_product.html', form=form)

if __name__ == '__main__':
    app.run(debug=True)
